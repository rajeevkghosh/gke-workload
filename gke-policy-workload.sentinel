#This policy uses the Sentinel tfplan/v2 import to require that
# all GCE compute instances have all mandatory labels

# Note that the comparison is case-sensitive but also that GCE labels are only
# allowed to contain lowercase letters, numbers, hypens, and underscores.

# Import tfplan-functions.sentinel
# with alias "plan"
import "tfplan/v2" as tfplan
import "tfplan-functions" as plan
import "strings"
import "types"

# Get all GKE Instances
allGkeInstances = plan.find_resources("google_container_cluster")
datasource = tfplan.raw.prior_state.values.root_module.resources
is_null_datasource = rule { types.type_of(datasource) == "undefined" }

workload_pool_var = ""
if not is_null_datasource {
projects  = filter tfplan.raw.prior_state.values.root_module.resources as _, rc {
   rc.type is "google_project" 
}

project_id=""
for projects as address, rc {
    project_id = plan.evaluate_attribute(rc, "values.project_id")
	#print(project_id)
}

workload_pool_var = plan.to_string(project_id)+".svc.id.goog"
}
print("workload_pool_var==>"+plan.to_string(workload_pool_var))

violations_workload_pool = {}
for allGkeInstances as address, rc {

	workload_pool = plan.evaluate_attribute(rc.change.after, "workload_identity_config")
	print(workload_pool)

	isnull_workload_pool = rule { types.type_of(workload_pool) == "null" }
	#print(isnull_workload_pool)
	if isnull_workload_pool {
        print("The value for  " + address + " Can't be Null ")
		violations_workload_pool[address] = rc

	} else {
        if workload_pool_var == "" {
			violations_workload_pool[address] = rc
			print ("For resource: "+address+" Please define data source for resource type: google_project")
		} else {
		if not (workload_pool[0]["workload_pool"] == workload_pool_var) {
            print("For the resource: "+ plan.to_string(address)+" The value for workload_identity_config.workload_pool can only be ${data.google_project.project.project_id}.svc.id.goog")
			violations_workload_pool[address] = rc

		}
	}
	}
}

GCP_GKE_WORLOADIDENT = rule { length(violations_workload_pool) is 0 }

main = rule { GCP_GKE_WORLOADIDENT }
